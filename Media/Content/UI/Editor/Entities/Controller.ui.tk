List {
	BorderColor: [255 255 255 64];
	Padding: 10;
	Margin: 10;
    HorizontalAlignment: Alignment.Stretch;

    Children: [
        ControllerSelect {
    		HorizontalAlignment: Alignment.Stretch;
    		AllowDefaultValue: true;
            Bindings: [
                Binding {
                    Source: "Controller";
                    Target: "Instance";
                    Direction: BindingDirection.TwoWay;
                }
            ];
        };
		Switch {
	    	ChildBindScope: "Controller";
    		HorizontalAlignment: Alignment.Stretch;
			Bindings: [
			    Binding {
			        Source: "Controller:typename";
			        Target: "Value";
			    }
			];
			Items: {
			    ArtilleryController: List {
    				HorizontalAlignment: Alignment.Stretch;
					Direction: Direction.Vertical;
					Margin: 10;
					Children: [
						Static { Text: "Search Range"; };
						NumericInput {
							Minimum: 1;
							Maximum: 1000;
							Bindings: [{
								Source: "MaxRange"; #todo: this doesnt rebind ;; binding scope?
								Target: "Value";
								Direction: BindingDirection.TwoWay;
							}];
						};
						# todo: field of view
						CheckBox {
							Text: "Can rotate to face target";
							Bindings: [{
								Source: "CanRotate"; #todo: this doesnt rebind ;; binding scope?
								Target: "IsChecked";
								Direction: BindingDirection.TwoWay;
							}];
						};
						CheckBox {
							Text: "Show targeting sweep lines";
							Bindings: [{
								Source: "ShowSweepLines"; #todo: this doesnt rebind ;; binding scope?
								Target: "IsChecked";
								Direction: BindingDirection.TwoWay;
							}];
						};
					];
			    };

			    AIController: List {
			    	Margin: 10;
					HorizontalAlignment: Alignment.Stretch;
					Children: [
						Static { Text: "`_Sight Range"; };
						NumericInput {
    						HorizontalAlignment: Alignment.Stretch;
							Minimum: 0;
							Maximum: 10000;
							Bindings: [
							    Binding {
							        Source: "SightRange";
							        Target: "Value";
							    }
							]
						}

						TabPanel {
							HorizontalAlignment: Alignment.Stretch;
							Children: [
								BehaviorList {
									Name: "Default Behaviors";
									HorizontalAlignment: Alignment.Stretch;
									Container: Accordian {
										HorizontalAlignment: Alignment.Stretch;
										Direction: Direction.Vertical;
										Margin: 10;
										InitiallyCollapsed: true;

										ShadeTitleUI: List {
											Direction: Direction.Horizontal;
											HorizontalAlignment: Alignment.Stretch;
											Children: [
												Static {
													Bindings: [
														Binding {
															Source: "Name";
															Target: "Text";
															#Converter: StringFormatConverter { Format: "`_{0}"; };
															DefaultValue: "(Unnamed behavior)";
														};
													];
												};

												@!"UI/RemoveItem.ui.tk";
											];
										};
									};

								    Bindings: [
								        Binding {
								            Source: "DefaultBehaviors"; # todo: make this parametric somehow
								            Target: "Items";
								            Direction: BindingDirection.TwoWay;
								        };
								    ];

									ItemUI: @"./Behaviors.ui.tk";

									AddItemTemplate: { };
									AddItemUI: Static {
										HorizontalAlignment: Alignment.Center;
										Styles: "Button";
										Text: "New Behavior";

										EventCommands: {
											Click: "AddItem";
										};
									};
								};

								BehaviorList {
									Name: "Pre-emptive Behaviors";
									HorizontalAlignment: Alignment.Stretch;
									Container: Accordian {
										HorizontalAlignment: Alignment.Stretch;
										Direction: Direction.Vertical;
										Margin: 10;
										InitiallyCollapsed: true;
									};

								    Bindings: [
								        Binding {
								            Source: "PreemptiveBehaviors";
								            Target: "Items";
								            Direction: BindingDirection.TwoWay;
								        };
								    ];

									ItemUI: @"./Behaviors.ui.tk";

									AddItemTemplate: { };
									AddItemUI: Static {
										HorizontalAlignment: Alignment.Center;
										Styles: "Button";
										Text: "New Behavior";

										EventCommands: {
											Click: "AddItem";
										};
									};
								};
							];
						};
				    ];
			    };
			};
		};
    ];
};