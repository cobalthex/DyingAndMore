List {
	BorderColor: [255 255 255 64];
	Padding: 10;
	Margin: 10;
    HorizontalAlignment: Alignment.Stretch;

    Children: [
        ControllerSelect {
    		HorizontalAlignment: Alignment.Stretch;
    		AllowDefaultValue: true;
            Bindings: [
                Binding {
                    Source: "Controller";
                    Target: "Instance";
                    Direction: BindingDirection.TwoWay;
                }
            ];
        };
		Switch {
	    	ChildBindScope: "Controller";
    		HorizontalAlignment: Alignment.Stretch;
			Bindings: [
			    Binding {
			        Source: "Controller:typename";
			        Target: "Value";
			    }
			];
			Items: {
			    ArtilleryController: List {
    				HorizontalAlignment: Alignment.Stretch;
					Direction: Direction.Vertical;
					Margin: 10;
					Children: [
						Static { Text: "Search Range"; };
						NumericInput {
							Minimum: 1;
							Maximum: 1000;
							Bindings: [{
								Source: "MaxRange"; #todo: this doesnt rebind ;; binding scope?
								Target: "Value";
								Direction: BindingDirection.TwoWay;
							}];
						};
						CheckBox {
							Text: "Can rotate to face target";
							Bindings: [{
								Source: "CanRotate"; #todo: this doesnt rebind ;; binding scope?
								Target: "IsChecked";
								Direction: BindingDirection.TwoWay;
							}];
						};
						CheckBox {
							Text: "Show targeting sweep lines";
							Bindings: [{
								Source: "ShowSweepLines"; #todo: this doesnt rebind ;; binding scope?
								Target: "IsChecked";
								Direction: BindingDirection.TwoWay;
							}];
						};
					];
			    };

			    AIController: BehaviorList {
			    	Margin: 10;
					HorizontalAlignment: Alignment.Stretch;
			        Bindings: [
			            Binding {
			                Source: "Behaviors";
			                Target: "Items";
			                Direction: BindingDirection.TwoWay;
			            }
			        ];

			    	ItemUI: List {
    					HorizontalAlignment: Alignment.Stretch;
    					Direction: Direction.Horizontal;
    					Children: [
    						Static {
				    			VerticalAlignment: ALignment.Center;
					    		Bindings: [
					    			Binding {
						    			Converter: StringFormatConverter {
						    				Format: "{0}) ";
						    				PreConverter : BasicMathConverter {
							    				Factor: 1;
							    			};
							    		};
					    				Source: ":index";
					    				Target: "Text";
					    			};
				    			];
				    		};

				    		Static {
				    			VerticalAlignment: Alignment.Center;
					    		#todo: switch on type (fill in details)?
					    		Bindings: [
					    			Binding {
					    				Source: ":typename";
					    				Target: "Text";
					    			};
				    			];
				    		};

				    		@"UI/RemoveItem.ui.tk";
			    		];
			    	};

			    	AddItemUI: BehaviorSelect {
    					HorizontalAlignment: Alignment.Stretch;
			            Bindings: [
			                Binding {
			                    Source: "item";
			                    Target: "Instance";
			                    Direction: BindingDirection.TwoWay;
			                }
			            ];
			    		EventCommands: {
			    			SelectionChanged: "AddItem";
			    		};
			    	};
			    };
			};
		};
    ];
};