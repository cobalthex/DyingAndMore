Switch {
	HorizontalAlignment: Alignment.Stretch;
	Bindings: [
	    Binding {
	        Source: ":typename";
	        Target: "Value";
	    };
	];

	Items: {
		# In alphabetical order

		AttachToTarget: Static { Text: "(no options)"; };

		CloneSelf: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	Static { Text: "`_Relative direction"; };
		    	PolarInput {
		    		ShowNormalizedValue: true;
		    		Bindings: [
		    			Binding {
		    				Source: "relativeDirection";
		    				Target: "NormalizedValue";
		    				Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};
    			Static {
		    		Bindings: [
		    			Binding {
		    				Source: "relativeDirection";
		    				Target: "Text";
		    			};
		    		];
    			};
	    	];
		};

		FaceTarget:  Static { Text: "(no options)"; };

		FindClosestActor: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	CheckBox {
		    		Text: "Find allies";

		    		Bindings: [
		    			Binding {
		    				Source: "isAlly";
		    				Target: "IsChecked";
		    				Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};

		    	CheckBox {
		    		Text: "Matching class";

		    		Bindings: [
		    			Binding {
		    				Source: "isSameClass";
		    				Target: "IsChecked";
		    				Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};
			];
		};

		FleeFromTarget: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	Static { Text: "(No options)"; };
    		];
		};

		FollowPath: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	Static { Text: "`_Path"; };
		    	PathSelect {
		    		Bindings: [
		    			Binding {
		    				Source: "path";
		    				Target: "SelectedPath";
		    				Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	}
	    	];
		};

		ForgetTarget: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	Static { Text: "(No options)"; };
	    	];
		};

		HealSelf: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	Static { Text: "`_Health per second"; };
		    	NumericInput {
		    		Bindings: [
		    			Binding {
		    				Source: "healthPerSecond";
		    				Target: "Value";
		    				Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};

		    	Static { Text: "`_Duration"; };
		    	DurationInput {
		    		Bindings: [
		    			Binding {
		    				Source: "duration";
		    				Target: "Duration";
		    				Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};

		    	CheckBox {
		    		Text: "Can revive";

		    		Bindings: [
		    			Binding {
		    				Source: "canRevive";
		    				Target: "IsChecked";
		    				Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};
	    	];
		};

		HealTarget: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	Static { Text: "`_Health per second"; };
		    	NumericInput {
		    		Bindings: [
		    			Binding {
		    				Source: "healthPerSecond";
		    				Target: "Value";
		    				Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};

		    	Static { Text: "`_Duration"; };
		    	DurationInput {
		    		Bindings: [
		    			Binding {
		    				Source: "duration";
		    				Target: "Duration";
		    				Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};

		    	CheckBox {
		    		Text: "Can Revive";

		    		Bindings: [
		    			Binding {
		    				Source: "canRevive";
		    				Target: "IsChecked";
		    				Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};
	    	];
		};

		HideFromTarget: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	Static { Text: "`cfa0 todo"; }; #todo
	    	];
		};

		SetTargetBeahavior: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	Static { Text: "`cfa0Todo"; } #todo
	    	];
		};

		MoveToTarget: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	Static { Text: "`_Completion distance"; };
		    	NumericInput {
		    		Minimum: 1;
		    		Maximum: 10000;
		    		Bindings: [
		    			Binding {
		    				Source: "radius";
		    				Target: "Value";
	    					Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};

		    	CheckBox {
		    		Text: "Continue forever";
		    		Bindings: [
		    			Binding {
		    				Source: "permanent";
		    				Target: "IsChecked";
	    					Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};
	    	];
		};

		NavigateGradient: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	Static { Text: "`_Completion distance"; };
		    	NumericInput {
		    		Minimum: 1;
		    		Maximum: 10000;
		    		Bindings: [
		    			Binding {
		    				Source: "targetValue";
		    				Target: "Value";
	    					Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};

		    	Static { Text: "`_Success Condition"; };
		    	ComparisonMethodSelect {
		    		Bindings: [
		    			Binding {
		    				Source: "successCondition";
		    				Target: "Value";
	    					Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};
	    	];
		};

		NavigateToTarget: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	CheckBox {
		    		Text: "Continue forever";
		    		Bindings: [
		    			Binding {
		    				Source: "permanent";
		    				Target: "IsChecked";
	    					Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};
	    	];
		};

		OrbitTarget: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	Static { Text: "`_Radius"; };
		    	NumericInput {
		    		Minimum: 1;
		    		Maximum: 10000;
		    		Bindings: [
		    			Binding {
		    				Source: "radius";
		    				Target: "Value";
	    					Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};

		    	CheckBox {
		    		Text: "Face target";
		    		Bindings: [
		    			Binding {
		    				Source: "faceTarget";
		    				Target: "IsChecked";
	    					Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};
	    	];
		};

		SetConditionOnSelf: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	Static { Text: "`_Condition to apply"; };
		    	ConditionSelect {
		    		Bindings: [
		    			Binding {
		    				Source: "condition";
		    				Target: "selectedItem";
	    					Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};

		    	Static { Text: "`_Duration"; };
		    	DurationInput {
		    		Bindings: [
		    			Binding {
		    				Source: "duration";
		    				Target: "Duration";
	    					Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};
	    	];
		};

		SetConditionOnTarget: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	Static { Text: "`_Condition to apply"; };
		    	ConditionSelect {
		    		Bindings: [
		    			Binding {
		    				Source: "condition";
		    				Target: "selectedItem";
	    					Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};

		    	Static { Text: "`_Duration"; };
		    	DurationInput {
		    		Bindings: [
		    			Binding {
		    				Source: "duration";
		    				Target: "Duration";
	    					Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};
	    	];
		};

		SetOwnClass: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	Static { Text: "`_Class"; };
		    	Static { Text: "`cfa0Todo"; } #todo

		    	CheckBox {
		    		Text: "Inherit controller";
		    		Bindings: [
		    			Binding {
		    				Source: "inheritController";
		    				Target: "IsChecked";
	    					Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};
	    	];
		};

		SetOwnFactions: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	Static { Text: "`_Factions"; };
		    	FactionSelect {
		    		Bindings: [
		    			Binding {
		    				Source: "factions";
		    				Target: "Value";
	    					Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};

		    	Static { Text: "`_Method"; };
		    	SetOperationsSelect {
		    		Bindings: [
		    			Binding {
		    				Source: "method";
		    				Target: "Value";
	    					Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};
	    	];
		};

		SetOwnWeapon: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	Static { Text: "`_Weapon"; };
		    	WeaponSelect {
		    		Bindings: [
		    			Binding {
		    				Source: "weapon";
		    				Target: "SelectedItem";
	    					Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};
	    	];
		};

		SetTargetClass: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	Static { Text: "`_Class"; };
		    	Static { Text: "`cfa0Todo"; } #todo

		    	CheckBox {
		    		Text: "Inherit Controller";
		    		Bindings: [
		    			Binding {
		    				Source: "inheritController";
		    				Target: "IsChecked";
	    					Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};
	    	];
		};

		SetTargetFactions: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	Static { Text: "`_Factions"; };
		    	FactionSelect {
		    		Bindings: [
		    			Binding {
		    				Source: "factions";
		    				Target: "Value";
	    					Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};

		    	Static { Text: "`_Method"; };
		    	SetOperationsSelect {
		    		Bindings: [
		    			Binding {
		    				Source: "method";
		    				Target: "Value";
	    					Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};
	    	];
		};

		SetTargetWeapon: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	Static { Text: "`_Weapon"; };
		    	WeaponSelect {
		    		Bindings: [
		    			Binding {
		    				Source: "weapon";
		    				Target: "SelectedItem";
	    					Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};
	    	];
		};

		ShootAtTarget: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	Static { Text: "`_Aiming method"; };
		    	AimingMethodSelect {
		    		Bindings: [
		    			Binding {
		    				Source: "aimingMethod";
		    				Target: "SelectedItem";
	    					Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};
	    	];
		};

		Suicide: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	Static { Text: "`_Effect"; }; #todo
		    	EffectsSelect {
		    		Bindings: [
		    			Binding {
		    				Source: "effect";
		    				Target: "SelectedItem";
	    					Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};
	    	];
		};

		TargetAggressor: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	CheckBox {
		    		Text: "Include Allies";
		    		Bindings: [
		    			Binding {
		    				Source: "includeAllies";
		    				Target: "IsChecked";
	    					Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};
	    	];
		};

	    Wait: List {
			HorizontalAlignment: Alignment.Stretch;
	    	Children: [
		    	Static { Text: "`_Duration"; };
		    	DurationInput {
		    		Bindings: [
		    			Binding {
		    				Source: "duration";
		    				Target: "Duration";
		    				Direction: BindingDirection.TwoWay;
		    			};
		    		];
		    	};
	    	];
	    };
	};
};