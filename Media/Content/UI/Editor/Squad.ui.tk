List {
	IsModal: true;
	Padding: 10;
	Margin: 10;
	HorizontalAlignment: Alignment.Center;
	VerticalAlignment: Alignment.Center;
	Direction: Direction.Vertical;
	Style: "Frame";
	Children: [
		List {
			Direction: Direction.Horizontal;
			Margin: 10;

			Children: [
				List {
					Direction: Direction.Vertical;
					Size: [300 NaN];
					Margin: 10;
					Children: [
						Static { Text: "`_Options"; };
						Static { Size: [1 1]; };

						CheckBox {
							Text: "Don't spawn units\nautomatically";
							Bindings: [
								Binding {
									Source: "DontSpawnAutomatically";
									Target: "IsChecked";
									Direction: BindingDirection.TwoWay;
								};
							];
						};

						CheckBox {
							Text: "Disable Spawning if\nLeader is dead";
							Bindings: [
								Binding {
									Source: "DisableSpawningIfLeaderIsDead";
									Target: "IsChecked";
									Direction: BindingDirection.TwoWay;
								};
							];
						};

						Static { Text: "`_Minimum Active Units"; }
						NumericInput {
							Bindings: [
								Binding {
									Source: "MinLiveCount";
									Target: "Value";
									Direction: BindingDirection.TwoWay;
								};
							];
						};

						Static { Text: "`_Maximum Active Units"; }
						NumericInput {
							Bindings: [
								Binding {
									Source: "MaxLiveCount";
									Target: "Value";
									Direction: BindingDirection.TwoWay;
								};
							];
						};

						Static { Text: "`_Total Spawn Allowance"; }
						NumericInput {
							Bindings: [
								Binding {
									Source: "MaxSpawnCount";
									Target: "Value";
									Direction: BindingDirection.TwoWay;
								};
							];
						};

						Static { Text: "`_Spawn Delay"; }
						DurationInput {
							ShowMinutes: false;
							Bindings: [
								Binding {
									Source: "SpawnDelay";
									Target: "Duration";
									Direction: BindingDirection.TwoWay;
								};
							];
						};

						Static { Text: "`_Current Spawn Count"; }
						Static {
							Bindings: [
								Binding {
									Source: "TotalSpawnCount";
									Target: "Text";
								};
							];
						};

						Static { Text: "`_Current Active Count"; }
						Static {
							Bindings: [
								Binding {
									Source: "Units.Count";
									Target: "Text";
								};
							];
						};
					];
				};

				Divider { Direction: Direction.Vertical; Padding: 10; };

				List {
					Direction: Direction.Vertical;
					Margin: 10;
					Size: [300 NaN];
					Children: [
						Static { Text: "`_Spawns"; };
						Static { };

						Static { Text: "`_Leader (Randomized)"; };
						ScrollBox {
							HorizontalAlignment: Alignment.Stretch;
							Size: [NaN 140];
							StayAtEnd: true;
							Children: [
								ActorList {
									Name: "SquadLeaderSelect";
									HorizontalAlignment: Alignment.Stretch;
									Container: List {
										Direction: Direction.Vertical;
										HorizontalAlignment: Alignment.Stretch;
										Margin: 10;
									}
									Bindings: [
										Binding {
											Source: "LeaderTemplate";
											Target: "Items";
											Direction: BindingDirection.TwoWay;
										};
									];
									ItemUI: @"./ActorPreview.ui.tk";
									AddItemUI: Static {
										Children: [
											Static {
												Text: "Select actor";
												Padding: [0 10];
												ChildBindScope: "this";
												EventCommands: {
													Click: [
														"AddRootUI"
														List {
															Name: "SquadActorSelector";
															HorizontalAlignment: Alignment.Center;
															VerticalAlignment: Alignment.Center;
															IsModal: true;
															Padding: 10;
															Margin: 10;
															Direction: Direction.Vertical;
															Style: "Frame";
															Children: [
																EntitySelector {
																	SearchPaths: ["Actors"];

																	Bindings: [
																		Binding {
																			Source: "item";
																			Target: "SelectedEntity";
																			Direction: BindingDirection.TwoWay;
																		};
																	];
																	EventCommands: {
																		Click: [ # hack (SelectionChanged will trigger before bindings update)
																			"Multiple" [
																				["Routed" ["SquadLeaderSelect" "AddItem"]]
																				["RemoveUI" "SquadActorSelector"]
																			]
																		];
																	}
																	Size: [400 400];
																};

																Static {
																	Text: "Cancel";
																	HorizontalAlignment: Alignment.Center;
																	Padding: 10;
																	EventCommands: {
																		Click: ["RemoveUI" "SquadActorSelector"];
																	};
																};
															];
														};
													];
												};
											};
										];
									};
								};
							];
						};

						Static { Text: "`_Units"; };
						ScrollBox {
							HorizontalAlignment: Alignment.Stretch;
							Size: [NaN 300];
							StayAtEnd: true;
							Children: [
								ActorList {
									Name: "SquadUnitSelect";
									HorizontalAlignment: Alignment.Stretch;
									Container: List {
										Direction: Direction.Vertical;
										HorizontalAlignment: Alignment.Stretch;
										Margin: 10;
									}
									Bindings: [
										Binding {
											Source: "UnitsTemplate";
											Target: "Items";
											Direction: BindingDirection.TwoWay;
										};
									];
									ItemUI: @"./ActorPreview.ui.tk";
									AddItemUI: Static {
										Children: [
											Static {
												Text: "Select actor";
												Padding: [0 10];
												ChildBindScope: "this";
												EventCommands: {
													Click: [
														"AddRootUI"
														List {
															Name: "SquadActorSelector";
															HorizontalAlignment: Alignment.Center;
															VerticalAlignment: Alignment.Center;
															IsModal: true;
															Padding: 10;
															Margin: 10;
															Direction: Direction.Vertical;
															Style: "Frame";
															Children: [
																EntitySelector {
																	SearchPaths: ["Actors"];

																	Bindings: [
																		Binding {
																			Source: "item";
																			Target: "SelectedEntity";
																			Direction: BindingDirection.TwoWay;
																		};
																	];
																	EventCommands: {
																		Click: [ # hack (SelectionChanged will trigger before bindings update)
																			"Multiple" [
																				["Routed" ["SquadUnitSelect" "AddItem"]]
																				["RemoveUI" "SquadActorSelector"]
																			]
																		];
																	}
																	Size: [400 400];
																};

																Static {
																	Text: "Cancel";
																	HorizontalAlignment: Alignment.Center;
																	Padding: 10;
																	EventCommands: {
																		Click: ["RemoveUI" "SquadActorSelector"];
																	};
																};
															];
														};
													];
												};
											};
										];
									};
								};
							];
						};
					];
				};
			];
		};

		Static {
			Text: "Close";
			HorizontalAlignment: Alignment.Center;
			Padding: [10 5];
			EventCommands: {
				Click: ["CloseModal"];
			};
		};
	];
};