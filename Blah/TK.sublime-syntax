%YAML 1.2
---

# use CTRL+SHIFT+ALT+P to debug

name: Takai Definition

file_extensions:
  - tk

scope: source.tk

variables:
  ident_begin: '[[:alpha:]]'
  ident_rest: '[[:alpha:]_0-9]'
  ident_bad: '[^[:alpha:]_0-9]'
  block_comment: '(#\*.*?\*#)'

contexts:
  prototype:
    - include: comments

  main:
    - include: atoms

  comments:
    - match: '#\*'
      push:
        - meta_scope: comment.block
        - match: '\*#'
          pop: true

    - match: (\#)(.*$\n)
      captures:
        1: comment.line # punctuation.definition.comment
        2: comment.line


  atoms:
    - include: comments

    - match: (?i)(null|true|false|NaN|infinity)
      scope: constant.language

    - match: '@'
      scope: punctuation.definition.keyword
      push:
        - match: '\.'
          comment: recursive reference
          scope: string
          pop: true
        # - match: '(?=["''])'
        #   set: string
        - match: '(".*?"|''.*?'')' # todo: string escaping, fuck this crap
          scope: string
          pop: true

    - match: '\*[A-Za-z_0-9.]+'
      scope: entity.name.class
      comment: internal reference

    - match: '{{ident_begin}}'
      scope: entity.name.class
      push:
        - meta_scope: meta.class
        - match: '\.'
          scope: punctuation.separator
          set:
            - meta_scope: entity.name.enum
            - match: '[A-Za-z_]'
            - match: '\.'
              scope: invalid.illegal
            - match: '\b'
              pop: true

        - match: '[A-Za-z_0-9]'
          scope: entity.name.class

        - match: '(?=\{)'
          set: dictionary
          pop: true # this is a hack, shouldnt be necessary

        - match: '\['
          scope: punctuation.section.brackets.begin
          set:
            - match: '\]'
              scope: punctuation.set.brackets.end
              pop: true

            - match: '{{ident_begin}}'
              push:
                - meta_scope: entity.name.enum
                - match: '(?=[\]\s;])'
                  pop: true

                - match: '{{ident_rest}}'

                - match: '.'
                  scope: invalid.illegal

        - match: '\b[^\s]'
          scope: invalid.illegal

        - match: '\s'

        - match: '{{ident_bad}}'
          scope: invalid.illegal

    - match: '\]'
      scope: invalid.illegal

    - match: '\}'
      scope: invalid.illegal

    - match: '\.'
      scope: invalid.illegal

    - match: ':'
      scope: invalid.illegal

    - match: '[+-]\s*{{block_comment}}?\s*;'
      scope: invalid.illegal

    - include: number
    - include: string
    - include: list
    - include: dictionary

  number_suffix:
    - meta_scope: meta.number.suffix

    - match: '%'
      scope: constant.other.number.suffix.percent
      pop: true

    - match: '\b'
      pop: true

    - match: '.'
      scope: constant.other.number.suffix

  number:
    - match: '[+-]'
      scope: constant.numeric

    - match: '0'
      scope: constant.numeric
      push:
        - match: '\.'
          set: base10no

        - match: '[1-9]'
          set: base10no

        - match: 'x'
          set: base16no

        - match: '(?=[%[:alpha:]])'
          set: number_suffix

        - match: '\b'
          pop: true

        - match: '.'
          scope: invalid.illegal.unknown.digit

    - match: '[1-9]'
      push: base10no

  base10no:
    - meta_scope: constant.numeric.integer

    - match: '(?=[%[:alpha:]])'
      comment: suffix
      scope: constant.other
      set: number_suffix

    - match: '[0-9]'

    - match: '-'
      scope: invalid.illegal.double-negative

    - match: '\.'
      set:
        - meta_scope: constant.numeric.float
        - match: '[0-9]'
        - match: '\b'
          pop: true
        - match: '.'
          scope: invalid.illegal.double-decimal

    # todo: exponents

    - match: '\b'
      pop: true

    - match: '.'
      scope: invalid.illegal.unknown.digit.dec

  base16no:
    - meta_scope: constant.numeric.hex

    - match: '[%[g-zG-Z]]'
      comment: suffix
      scope: constant.other
      set: number_suffix

    - match: '[0-9a-fA-F]'

    - match: '\b'
      pop: true

    - match: '.'
      scope: invalid.illegal.unknown.digit.hex

  string:
    - meta_include_prototype: false
    - match: \"
      scope: punctuation.definition.string.begin
      push:
        - meta_scope: string.quoted.double
        - match: \"
          scope: punctuation.definition.string.end
          pop: true
        - include: string_escape
    - match: \'
      scope: punctuation.definition.string.begin
      push:
        - meta_scope: string.quoted.single
        - match: \'
          scope: punctuation.definition.string.end
          pop: true
        - include: string_escape

  string_escape:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation
    - match: \\(?:\\|[abefnrtv\'"?]|[0-3][0-9]{0,2}|[4-7][0-9]?|x[a-fA-F0-9]+|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})
      scope: constant.character.escape
    - match: \\.
      scope: invalid.illegal.unknown-escape.c

  list:
    - match: '\['
      scope: punctuation.section.array.begin
      push:
        - meta_scope: meta.list

        - match: '\]'
          scope: punctuation.section.array.end
          pop: true

        - include: atoms

  dictionary:
    - meta_scope: meta.dictionary

    - match: '\{'
      scope: punctuation.section.block.begin
      push:
        - match: '\}'
          scope: punctuation.section.block.end
          pop: true

        - include: comments

        # stray/extra ;
        - match: ';'
          scope: invalid.illegal

        # todo: this doesnt work (key value without value)
        - match: '(?=[\n;])'
          scope: invalid.illegal

        # property key
        - match: '[^:]'
          scope: variable

        - match: ':\s*{{block_comment}}?\s*(;)'
          comment: empty property
          captures:
            1: comment.block
            2: invalid.illegal.semicolon

        - match: ':'
          scope: punctuation.definition.keyword.separator
          push:
            - meta_scope: meta.property

            - include: atoms

            # terminator in middle of key: value
            - match: '(?=\})'
              #scope: invalid.illegal #?
              pop: true

            - match: '[;\n]'
              scope: punctuation.definition.key.terminator
              pop: true

            - match: '[^\s]'
              comment: more than one value
              scope: invalid.illegal.double-property-value
